# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Template for Java CI with Gradle

on:
  workflow_call:
    inputs:
      repo:
        required: true
        type: string

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew bootJar
    - name: Download Dockerfile
      run: |
        # jq 명령어를 사용하여 Dockerfile 부분 추출
        dockerfile_content=$(curl -s https://api.github.com/repos/testserviceteam/testService1/contents/Dockerfile | jq -r '.content' | tr -d '"' | base64 -d)
        # 추출한 Dockerfile 내용 출력
        echo "$dockerfile_content" > Dockerfile
    - name: docker build and push
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ inputs.repo }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ inputs.repo }}
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          cd /home/${{ secrets.SERVER_USERNAME }}
          sudo ./deployment.sh ${{ inputs.repo }}
          sudo kubectl apply -f deployment.yaml
          sudo kubectl apply -f autoscaling.yaml
          sudo kubectl apply -f routingrule.yaml
          sudo kubectl apply -f service.yaml
